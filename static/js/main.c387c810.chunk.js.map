{"version":3,"sources":["components/SetBoard/SetBoard.module.css","components/CountBoard/CountBoard.module.css","App.module.css","components/Button/Button.module.css","components/Button/Button.tsx","components/CountBoard/CountBoard.tsx","components/SetBoard/SetBoard.tsx","App.tsx","index.tsx"],"names":["module","exports","Button","props","onClick","buttonFunction","disabled","disabledButton","value","className","s","button","title","CountBoard","board","startValue","maxValue","activeMaxValue","activeMinValue","text","errorText","maxInc","SetBoard","maximumValue","setText","inputBlock","inputBoard","inputBoardFire","onChange","e","setActiveMaxValue","maxCurrentValue","Number","currentTarget","setMaximumValue","onChangeMaxValue","type","setActiveMinValue","setStartValue","startCurrentValue","onChangeStartValue","setFunc","disabledSetButton","getMinValue","localStorage","getItem","getMaxValue","App","useState","setValue","project","setItem","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c387c810.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"SetBoard_board__2ZJ24\",\"inputBlock\":\"SetBoard_inputBlock__Dk-oc\",\"inputFire\":\"SetBoard_inputFire__CBGqk\",\"inputBoard\":\"SetBoard_inputBoard__1viWX\",\"inputBoardFire\":\"SetBoard_inputBoardFire__3Yx44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"CountBoard_board__1R6sX\",\"value\":\"CountBoard_value__2_tBI\",\"maxInc\":\"CountBoard_maxInc__2pIRt\",\"text\":\"CountBoard_text__2n7uP\",\"errorText\":\"CountBoard_errorText__sxq9I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"project\":\"App_project__2-fen\",\"counter\":\"App_counter__13G5d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3VHM8\"};","import React from \"react\"\nimport s from './Button.module.css'\n\ntype ButtonPropsType = {\n  title: string\n  buttonFunction: () => void\n  value: number\n  disabledButton: (value: number) => boolean\n}\nexport const Button: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\n  return (\n      <div>\n        <button onClick={props.buttonFunction} disabled={props.disabledButton(props.value)}\n                className={s.button}>{props.title}</button>\n      </div>\n  )\n}","import React from 'react'\nimport s from './CountBoard.module.css'\nimport { TextType } from '../../App'\n\ntype CountBoardPropsType = {\n    value: number\n    maxValue: number\n    startValue: number\n    text: string\n    setText: (text: TextType) => void\n    activeMaxValue: boolean\n    activeMinValue: boolean\n\n}\n\n\nexport const CountBoard: React.FC<CountBoardPropsType> = (props: CountBoardPropsType) => {\n\n    return (\n        <div className={s.board}>\n\n            { props.startValue < 0 ||  props.maxValue < 0 || props.activeMaxValue || props.activeMinValue\n                ? <div className={(props.text === 'Incorrect value!') ? s.errorText : s.text }> {props.text}</div>\n                : <div className={(props.value === props.maxValue) ? s.maxInc : s.value}>{props.value}</div>\n            }\n        </div>\n    )\n}\n","import React, {ChangeEvent} from 'react'\nimport '../../App.css'\nimport s from './SetBoard.module.css'\nimport {Button} from \"../Button/Button\"\nimport {TextType} from \"../../App\"\n\ntype SetBoardPropsType = {\n    value: number\n    setFunc: () => void\n    disabledSetButton: (value: number) => boolean\n    maximumValue: number\n    setMaximumValue: (value: number) => void\n    startValue: number\n    setStartValue: (value: number) => void\n    activeMaxValue: boolean\n    setActiveMaxValue: (value: boolean) => void\n    activeMinValue: boolean\n    setActiveMinValue: (value: boolean) => void\n    text: string\n    setText: (text: TextType) => void\n}\n\nexport const SetBoard: React.FC<SetBoardPropsType> = (props: SetBoardPropsType) => {\n    (props.startValue === 0 && props.maximumValue > 0) || (props.maximumValue > 0 && props.maximumValue > props.startValue && props.startValue >= 0)\n        ? props.setText(`enter value and press 'set'`)\n        : props.setText('Incorrect value!')\n\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setActiveMaxValue(true)\n        let maxCurrentValue: number = Number(e.currentTarget.value)\n        props.setMaximumValue(maxCurrentValue)\n    }\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.setActiveMinValue(true)\n        props.setStartValue(0)\n        let startCurrentValue = Number(e.currentTarget.value)\n        props.setStartValue(startCurrentValue)\n    }\n\n    return (\n        <div className='counter'>\n            <div className={s.board}>\n                <div className={s.inputBlock}>\n                    <span>max value: </span>\n                    <input className={(props.text === 'Incorrect value!') ? `${s.inputBoard} ${s.inputBoardFire}` : `${s.inputBoard} `}\n                           onChange={(e) => {onChangeMaxValue(e)}} type=\"number\"\n                           value= {props.maximumValue}/>\n\n                </div>\n                <div className={s.inputBlock}>\n                    <span>start value:</span>\n                    <input className={(props.text === 'Incorrect value!') ? `${s.inputBoard} ${s.inputBoardFire}` : `${s.inputBoard} `}\n                    onChange={(e) => {onChangeStartValue(e)}} type=\"number\"\n                    value={props.startValue}/>\n                </div>\n            </div>\n            <div className='buttons'>\n                <Button title={'set'} buttonFunction={props.setFunc} value={props.value}\n                        disabledButton={props.disabledSetButton} />\n            </div>\n        </div>\n    )\n}\n","import React, {useState} from 'react'\r\nimport s from './App.module.css'\r\nimport './App.css'\r\nimport {Button} from \"./components/Button/Button\"\r\nimport {CountBoard} from \"./components/CountBoard/CountBoard\"\r\nimport {SetBoard} from \"./components/SetBoard/SetBoard\"\r\n\r\nexport type TextType = `enter value and press 'set'` | `Incorrect value!`\r\n\r\ntype getValueType = string | null\r\nexport let getMinValue: getValueType = localStorage.getItem('min')\r\nexport let getMaxValue: getValueType = localStorage.getItem('max')\r\n\r\nexport const App: React.FC = () => {\r\n\r\n    const [maximumValue, setMaximumValue] = useState<number>(Number(getMaxValue))\r\n    const [startValue, setStartValue] = useState<number>(Number(getMinValue))\r\n    const [value, setValue] = useState<number>(0)\r\n    const [text, setText] = useState <TextType> (`enter value and press 'set'` )\r\n    const [activeMaxValue, setActiveMaxValue] = useState<boolean>(false)\r\n    const [activeMinValue, setActiveMinValue] = useState<boolean>(false)\r\n\r\n    const setFunc = () => {\r\n        setValue(startValue)\r\n        setActiveMinValue(false)\r\n        setActiveMaxValue(false)\r\n        localStorage.setItem('max', maximumValue.toString());\r\n        localStorage.setItem('min', startValue.toString());\r\n\r\n    }\r\n    const incFunc = () => {\r\n        (value >= startValue && value <= maximumValue) && setValue(value + 1)\r\n    }\r\n    const resFunc = () => {\r\n        setValue(0)\r\n    }\r\n\r\n    const disabledSetButton = (value: number) => {\r\n        if (maximumValue && startValue >= 0  && maximumValue > startValue && maximumValue !== startValue && maximumValue > 0 && startValue >= 0) {\r\n            return false\r\n        }else {\r\n            return true\r\n        }\r\n    }\r\n    const disabledIncButton = (value: number) => {\r\n        if (value >= 0  && value < maximumValue && value >= startValue  ) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n    }\r\n    const disabledResButton = (value: number) => {\r\n        if (value <= 0 ) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.project}>\r\n            <SetBoard value={value} setFunc={setFunc} disabledSetButton={disabledSetButton}\r\n                      maximumValue={maximumValue}\r\n                      setMaximumValue={setMaximumValue}\r\n                      startValue={startValue}\r\n                      setStartValue={setStartValue}\r\n                      activeMaxValue={activeMaxValue}\r\n                      setActiveMaxValue={setActiveMaxValue}\r\n                      activeMinValue={activeMinValue}\r\n                      setActiveMinValue={setActiveMinValue}\r\n                      text={text}\r\n                      setText={setText}\r\n            />\r\n            <div className='counter'>\r\n                <CountBoard value={value} maxValue={maximumValue} startValue={startValue}\r\n                            text={text} setText={setText}\r\n                            activeMaxValue={activeMaxValue} activeMinValue={activeMinValue}\r\n                />\r\n                <div className='buttons'>\r\n                    <Button title={'inc'} buttonFunction={incFunc} value={value} disabledButton={disabledIncButton}/>\r\n                    <Button title={'reset'} buttonFunction={resFunc} value={value} disabledButton={disabledResButton}/>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}
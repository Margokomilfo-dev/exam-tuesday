{"version":3,"sources":["components/SetBoard/SetBoard.module.css","components/CountBoard/CountBoard.module.css","App.module.css","components/Button/Button.module.css","store/counerReducer.ts","store/selectors.ts","components/Button/Button.tsx","components/CountBoard/CountBoard.tsx","components/SetBoard/SetBoard.tsx","App.tsx","store/store.ts","index.tsx"],"names":["module","exports","ACTIONS_TYPE","selectCounter","state","counter","Button","props","value","useSelector","onClick","buttonFunction","disabled","disabledButton","className","s","button","title","CountBoard","activeMinValue","activeMaxValue","startValue","maximumValue","board","text","errorText","maxInc","initState","actionsCreators","type","SETTING","INCREMENTAL","RESET","CHANGE_MAX_VALUE","status","CHANGE_MAX_VALUE_WITH_STATUS","CHANGE_START_VALUE","CHANGE_START_VALUE_WITH_STATUS","CHANGE_ACTIVE_STATUS_MIN","CHANGE_ACTIVE_STATUS_MAX","SetBoard","dispatch","useDispatch","setText","inputBlock","onFocus","inputBoard","inputBoardFire","onChange","e","Number","currentTarget","onChangeMaxValue","onChangeStartValue","disabledSetButton","getMinValue","localStorage","getItem","getMaxValue","App","useEffect","useState","_useDispatch","ac","project","reducers","combineReducers","action","copyState","setItem","toString","store","createStore","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b0879b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"SetBoard_board__2ZJ24\",\"inputBlock\":\"SetBoard_inputBlock__Dk-oc\",\"inputFire\":\"SetBoard_inputFire__CBGqk\",\"inputBoard\":\"SetBoard_inputBoard__1viWX\",\"inputBoardFire\":\"SetBoard_inputBoardFire__3Yx44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"board\":\"CountBoard_board__1R6sX\",\"value\":\"CountBoard_value__2_tBI\",\"maxInc\":\"CountBoard_maxInc__2pIRt\",\"text\":\"CountBoard_text__2n7uP\",\"errorText\":\"CountBoard_errorText__sxq9I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"project\":\"App_project__2-fen\",\"counter\":\"App_counter__13G5d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3VHM8\"};","import {useDispatch as _useDispatch} from \"react-redux\";\r\n\r\nexport enum ACTIONS_TYPE{\r\n    SETTING = 'SETTING',\r\n    INCREMENTAL= 'INCREMENTAL',\r\n    RESET = 'RESET',\r\n    CHANGE_START_VALUE = 'CHANGE_START_VALUE',\r\n    CHANGE_MAX_VALUE = 'CHANGE_MAX_VALUE',\r\n    CHANGE_START_VALUE_WITH_STATUS = 'CHANGE_START_VALUE_WITH_STATUS',\r\n    CHANGE_MAX_VALUE_WITH_STATUS = 'CHANGE_MAX_VALUE_WITH_STATUS',\r\n    CHANGE_ACTIVE_STATUS_MIN = 'CHANGE_ACTIVE_STATUS_MIN',\r\n    CHANGE_ACTIVE_STATUS_MAX = 'CHANGE_ACTIVE_STATUS_MAX',\r\n}\r\n\r\nlet initState = {\r\n    value: 0,\r\n    activeMinValue: true,\r\n    activeMaxValue: true,\r\n    startValue:  0,\r\n    maximumValue: 1,\r\n}\r\n\r\nexport type InitStateType = typeof initState\r\ntype ActionsType =\r\n    | ReturnType<typeof actionsCreators.SettingAC>\r\n    | ReturnType<typeof actionsCreators.IncrementalAC>\r\n    | ReturnType<typeof actionsCreators.ResetAC>\r\n    | ReturnType<typeof actionsCreators.ChangeMaxValue>\r\n    | ReturnType<typeof actionsCreators.ChangeStartValue>\r\n    | ReturnType<typeof actionsCreators.ChangeMaxValueWithStatus>\r\n    | ReturnType<typeof actionsCreators.ChangeStartValueWithStatus>\r\n    | ReturnType<typeof actionsCreators.ChangeActiveStatusMin>\r\n    | ReturnType<typeof actionsCreators.ChangeActiveStatusMax>\r\n\r\n\r\nexport const counterReducer = (state: InitStateType = initState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SETTING:\r\n            let copyState = {...state}\r\n            localStorage.setItem('max', copyState.maximumValue.toString());\r\n            localStorage.setItem('min', copyState.startValue.toString());\r\n            copyState.value = action.value\r\n            copyState.activeMinValue = false\r\n            copyState.activeMaxValue= false\r\n            return copyState\r\n\r\n        case ACTIONS_TYPE.INCREMENTAL:\r\n            return {\r\n                ...state,\r\n                value: action.value + 1,\r\n            }\r\n\r\n        case ACTIONS_TYPE.RESET:\r\n            return {\r\n                ...state,\r\n                value: 0,\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_START_VALUE:\r\n            return {\r\n                ...state,\r\n                startValue: action.value\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_START_VALUE_WITH_STATUS:\r\n            return {\r\n                ...state,\r\n                activeMinValue: action.status,\r\n                startValue: action.value,\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maximumValue: action.value\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_MAX_VALUE_WITH_STATUS:\r\n            return {\r\n                ...state,\r\n                activeMaxValue: action.status,\r\n                maximumValue: action.value\r\n            }\r\n\r\n        case ACTIONS_TYPE.CHANGE_ACTIVE_STATUS_MIN:\r\n            return {\r\n                ...state,\r\n                activeMinValue: action.status,\r\n            }\r\n\r\n         case ACTIONS_TYPE.CHANGE_ACTIVE_STATUS_MAX:\r\n            return {\r\n                ...state,\r\n                activeMaxValue: action.status,\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actionsCreators = {\r\n    SettingAC: (value: number) => ({type: ACTIONS_TYPE.SETTING, value} as const),\r\n    IncrementalAC: (value: number) => ({type: ACTIONS_TYPE.INCREMENTAL, value} as const),\r\n    ResetAC: () => ({type: ACTIONS_TYPE.RESET} as const),\r\n    ChangeMaxValue: (value: number) => ({type: ACTIONS_TYPE.CHANGE_MAX_VALUE, value } as const),\r\n    ChangeMaxValueWithStatus: (value: number, status: boolean) => ({type: ACTIONS_TYPE.CHANGE_MAX_VALUE_WITH_STATUS, value, status } as const),\r\n    ChangeStartValue: (value: number) => ({type: ACTIONS_TYPE.CHANGE_START_VALUE, value } as const),\r\n    ChangeStartValueWithStatus: (value: number, status: boolean) => ({type: ACTIONS_TYPE.CHANGE_START_VALUE_WITH_STATUS, value, status } as const),\r\n    ChangeActiveStatusMin: (status: boolean) => ({type: ACTIONS_TYPE.CHANGE_ACTIVE_STATUS_MIN, status} as const),\r\n    ChangeActiveStatusMax: (status: boolean) => ({type: ACTIONS_TYPE.CHANGE_ACTIVE_STATUS_MAX, status} as const),\r\n}\r\n\r\nexport function useDispatch() {\r\n    const dispatch = _useDispatch()\r\n    return (ac: ActionsType)=> dispatch(ac)\r\n}","import { AllStateType } from \"./store\";\r\n\r\nexport let selectCounter = (state: AllStateType) => state.counter","import React from \"react\"\nimport s from './Button.module.css'\nimport {useSelector} from \"react-redux\";\nimport {selectCounter} from \"../../store/selectors\";\n\nexport type ButtonPropsType = {\n    title: string\n    buttonFunction: () => void\n    disabledButton: (value: number) => boolean\n}\nexport const Button: React.FC<ButtonPropsType> = (props: ButtonPropsType) => {\n    const {value} = useSelector(selectCounter);\n    return (\n        <div>\n            <button onClick={props.buttonFunction} disabled={props.disabledButton(value)}\n                    className={s.button}>{props.title}</button>\n        </div>\n    )\n}","import React from 'react'\r\nimport s from './CountBoard.module.css'\r\nimport { TextType } from '../../App'\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCounter} from \"../../store/selectors\";\r\n\r\nexport type CountBoardPropsType = {\r\n    text: string\r\n    setText: (text: TextType) => void\r\n}\r\n\r\nexport const CountBoard: React.FC<CountBoardPropsType> = (props: CountBoardPropsType) => {\r\n    const {value, activeMinValue, activeMaxValue, startValue, maximumValue} = useSelector(selectCounter)\r\n\r\n    return (\r\n        <div className={s.board}>\r\n            { startValue < 0 ||  maximumValue < 0 || activeMaxValue || activeMinValue\r\n                ? <div className={(props.text === 'Incorrect value!') ? s.errorText : s.text }> {props.text}</div>\r\n                : <div className={(value === maximumValue) ? s.maxInc : s.value}>{value}</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react'\r\nimport '../../App.css'\r\nimport s from './SetBoard.module.css'\r\nimport {Button} from \"../Button/Button\"\r\nimport {TextType} from \"../../App\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {actionsCreators} from \"../../store/counerReducer\";\r\nimport {selectCounter} from \"../../store/selectors\";\r\n\r\nexport type SetBoardPropsType = {\r\n    disabledSetButton: (value: number) => boolean\r\n    text: string\r\n    setText: (text: TextType) => void\r\n}\r\n\r\nexport const SetBoard: React.FC<SetBoardPropsType> = (props: SetBoardPropsType) => {\r\n\r\n    let dispatch = useDispatch()\r\n    const {startValue, maximumValue} = useSelector(selectCounter);\r\n\r\n    (startValue === 0 && maximumValue > 0) || (maximumValue > 0 && maximumValue > startValue && startValue >= 0)\r\n        ? props.setText(`enter value and press 'set'`)\r\n        : props.setText('Incorrect value!')\r\n\r\n    const setFunc = () => {\r\n        dispatch(actionsCreators.SettingAC(startValue))\r\n    }\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(actionsCreators.ChangeMaxValueWithStatus((Number(e.currentTarget.value)), true))\r\n    }\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(actionsCreators.ChangeStartValueWithStatus((Number(e.currentTarget.value)), true))\r\n    }\r\n\r\n    return (\r\n        <div className='counter'>\r\n            <div className={s.board}>\r\n                <div className={s.inputBlock}>\r\n                    <span>max value: </span>\r\n                    <input onFocus={()=> {dispatch(actionsCreators.ChangeActiveStatusMax(true))}}\r\n                           className={(props.text === 'Incorrect value!') ? `${s.inputBoard} ${s.inputBoardFire}` : `${s.inputBoard} `}\r\n                           onChange={(e) => {onChangeMaxValue(e)}} type=\"number\"\r\n                           value= {maximumValue}/>\r\n                </div>\r\n                <div\r\n                    className={s.inputBlock}>\r\n                    <span>start value:</span>\r\n                    <input onFocus={()=> {dispatch(actionsCreators.ChangeActiveStatusMin(true))}}\r\n                           className={(props.text === 'Incorrect value!') ? `${s.inputBoard} ${s.inputBoardFire}` : `${s.inputBoard} `}\r\n                           onChange={(e) => {onChangeStartValue(e)}} type=\"number\"\r\n                           value={startValue}/>\r\n                </div>\r\n            </div>\r\n            <div className='buttons'>\r\n                <Button title={'set'}\r\n                        buttonFunction={setFunc}\r\n                        disabledButton={props.disabledSetButton} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport s from './App.module.css'\r\nimport './App.css'\r\nimport {Button} from \"./components/Button/Button\"\r\nimport {CountBoard} from \"./components/CountBoard/CountBoard\"\r\nimport {SetBoard} from \"./components/SetBoard/SetBoard\"\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectCounter} from \"./store/selectors\";\r\nimport {actionsCreators, useDispatch} from \"./store/counerReducer\";\r\n\r\nexport type TextType = `enter value and press 'set'` | `Incorrect value!`\r\n\r\ntype GetValueType = string | null\r\nlet getMinValue: GetValueType= localStorage.getItem('min')\r\nlet getMaxValue: GetValueType = localStorage.getItem('max')\r\n\r\n\r\nexport const App: React.FC = () => {\r\n\r\n    useEffect(() => {\r\n        if (getMinValue && getMaxValue) {\r\n            dispatch(actionsCreators.ChangeStartValue(+getMinValue))\r\n            dispatch(actionsCreators.ChangeMaxValue(+getMaxValue))\r\n        }\r\n    },[])\r\n\r\n    const [text, setText] = useState <TextType> (`enter value and press 'set'` )\r\n    const {value, activeMinValue, activeMaxValue, startValue, maximumValue} = useSelector(selectCounter)\r\n    let dispatch = useDispatch()\r\n\r\n    const incFunc = () => {\r\n        (value >= startValue && value <= maximumValue) &&\r\n        dispatch(actionsCreators.IncrementalAC(value))\r\n    }\r\n    const resFunc = () => {\r\n        dispatch(actionsCreators.ResetAC())\r\n    }\r\n    const disabledSetButton = (value: number) => {\r\n        return !(maximumValue && startValue >= 0 && maximumValue > startValue && maximumValue !== startValue && maximumValue > 0 && startValue >= 0);\r\n    }\r\n    const disabledIncButton = (value: number) => {\r\n        return !(value >= 0 && value < maximumValue && value >= startValue && (!activeMaxValue && !activeMinValue));\r\n    }\r\n    const disabledResButton = (value: number) => {\r\n        return value <= 0;\r\n    }\r\n\r\n    return (\r\n        <div className={s.project}>\r\n            <SetBoard disabledSetButton={disabledSetButton}\r\n                      text={text}\r\n                      setText={setText}\r\n            />\r\n            <div className='counter'>\r\n                <CountBoard text={text} setText={setText}/>\r\n                <div className='buttons'>\r\n                    <Button title={'inc'} buttonFunction={incFunc} disabledButton={disabledIncButton}/>\r\n                    <Button title={'reset'} buttonFunction={resFunc} disabledButton={disabledResButton}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {counterReducer} from \"./counerReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    counter: counterReducer\r\n})\r\nexport type AllStateType = ReturnType<typeof reducers>\r\nexport const store: Store = createStore(reducers)\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport { store } from './store/store'\nimport {Provider} from \"react-redux\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}